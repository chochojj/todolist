{"version":3,"file":"static/js/790.dfbaa108.chunk.js","mappings":"oLAKMA,EAAUC,EAAAA,GAAAA,IAAU,myFAgI1B,UA1BA,WACE,OAA8BC,EAAAA,EAAAA,WAAS,WACrC,IAAMC,EAAgBC,aAAaC,QAAQ,WAC3C,OAAOF,EAAgBG,KAAKC,MAAMJ,GAAiB,EACrD,IAAE,eAHKK,EAAO,KAId,GAJ0B,MAIAN,EAAAA,EAAAA,UAAS,IAAIO,OAAO,eAAvCC,EAAK,KAAEC,EAAQ,KActB,OACE,SAACX,EAAO,WACN,SAAC,KAAQ,CAACW,SAAUA,EAAUD,MAAOA,EAAOE,YAR5B,SAAH,GACf,OANe,SAACC,GAChB,OAAOL,EAAQM,MAAK,SAACC,GAAK,OAAKA,EAAMF,OAASA,EAAKG,cAAc,GACnE,CAIMC,CADqB,EAAJJ,OAEZ,0BAAM,WAER,IACT,KAMF,C","sources":["pages/Schedule.js"],"sourcesContent":["import { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css'; // css import\r\nimport styled from 'styled-components';\r\n\r\nconst Monthly = styled.div`\r\n  width: 800px;\r\n  height: fit-content;\r\n  paddding: 10px;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  border-radius: 20px;\r\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);\r\n\r\n  .react-calendar {\r\n    width: 80%;\r\n    height: 100%;\r\n    margin-top: 20px;\r\n    background-color: transparent;\r\n    border: none;\r\n  }\r\n  .react-calendar__navigation button {\r\n    color: rgba(130, 130, 130, 1);\r\n    font-weight: bold;\r\n    min-width: 44px;\r\n    background: none;\r\n    font-size: 1em;\r\n    margin-top: 8px;\r\n  }\r\n  .react-calendar__navigation button:enabled:hover,\r\n  .react-calendar__navigation button:enabled:focus {\r\n    background-color: #f8f8fa;\r\n  }\r\n  .react-calendar__navigation button[disabled] {\r\n    background-color: #f0f0f0;\r\n  }\r\n  abbr[title] {\r\n    text-decoration: none;\r\n  }\r\n  /* .react-calendar__month-view__days__day--weekend {\r\n    color: #d10000;\r\n    } */\r\n  .react-calendar__tile {\r\n    height: 70px;\r\n  }\r\n  .react-calendar__tile:enabled:hover,\r\n  .react-calendar__tile:enabled:focus {\r\n    background: rgba(254, 194, 194, 0.15);\r\n    color: rgba(130, 130, 130, 1);\r\n    border-radius: 6px;\r\n  }\r\n  .react-calendar__tile--now {\r\n    background: rgba(254, 194, 194, 0.15);\r\n    border-radius: 6px;\r\n    font-weight: bold;\r\n    color: rgba(130, 130, 130, 1);\r\n  }\r\n  .react-calendar__tile--now:enabled:hover,\r\n  .react-calendar__tile--now:enabled:focus {\r\n    background: rgba(254, 194, 194, 0.15);\r\n    border-radius: 6px;\r\n    font-weight: bold;\r\n    color: rgba(130, 130, 130, 1);\r\n  }\r\n  .react-calendar__tile--hasActive:enabled:hover,\r\n  .react-calendar__tile--hasActive:enabled:focus {\r\n    background: rgba(254, 194, 194, 0.15);\r\n  }\r\n  .react-calendar__tile--active {\r\n    background: rgba(254, 194, 194, 0.15);\r\n    border-radius: 6px;\r\n    font-weight: bold;\r\n    color: white;\r\n  }\r\n  .react-calendar__tile--active:enabled:hover,\r\n  .react-calendar__tile--active:enabled:focus {\r\n    background: rgba(254, 194, 194, 1);\r\n    color: white;\r\n  }\r\n  .react-calendar--selectRange .react-calendar__tile--hover {\r\n    background-color: rgba(254, 194, 194, 1);\r\n  }\r\n  .react-calendar__tile--range {\r\n    background: rgba(254, 194, 194, 1);\r\n    color: rgba(130, 130, 130, 1);\r\n    border-radius: 0;\r\n  }\r\n  .react-calendar__tile--rangeStart {\r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    border-top-left-radius: 6px;\r\n    border-bottom-left-radius: 6px;\r\n    background: rgba(254, 194, 194, 0.3);\r\n    color: rgba(130, 130, 130, 1);\r\n  }\r\n  .react-calendar__tile--rangeEnd {\r\n    border-top-left-radius: 0;\r\n    border-bottom-left-radius: 0;\r\n    border-top-right-radius: 6px;\r\n    border-bottom-right-radius: 6px;\r\n    background: rgba(254, 194, 194, 0.3);\r\n    color: rgba(130, 130, 130, 1);\r\n  }\r\n`;\r\n\r\nfunction Schedule() {\r\n  const [diaries, setDiaries] = useState(() => {\r\n    const storedDiaries = localStorage.getItem('diaries');\r\n    return storedDiaries ? JSON.parse(storedDiaries) : [];\r\n  });\r\n  const [value, onChange] = useState(new Date());\r\n\r\n  // 해당 날짜에 일치하는 일기가 있는지 확인하는 함수\r\n  const hasDiary = (date) => {\r\n    return diaries.some((diary) => diary.date === date.toDateString());\r\n  };\r\n\r\n  // 달력의 각 날짜마다 렌더링될 콘텐츠를 정의하는 함수\r\n  const tileContent = ({ date }) => {\r\n    if (hasDiary(date)) {\r\n      return <span>점</span>;\r\n    }\r\n    return null;\r\n  };\r\n  return (\r\n    <Monthly>\r\n      <Calendar onChange={onChange} value={value} tileContent={tileContent} />\r\n    </Monthly>\r\n  );\r\n}\r\n\r\nexport default Schedule;\r\n"],"names":["Monthly","styled","useState","storedDiaries","localStorage","getItem","JSON","parse","diaries","Date","value","onChange","tileContent","date","some","diary","toDateString","hasDiary"],"sourceRoot":""}